<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: video | 203]]></title>
  <link href="http://203.softover.com/categories/video/atom.xml" rel="self"/>
  <link href="http://203.softover.com/"/>
  <updated>2015-02-02T08:36:26-08:00</updated>
  <id>http://203.softover.com/</id>
  <author>
    <name><![CDATA[Eugene Kalenkovich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Videos - Picks for December, 2014]]></title>
    <link href="http://203.softover.com/2014/12/15/videos-december/"/>
    <updated>2014-12-15T07:40:12-08:00</updated>
    <id>http://203.softover.com/2014/12/15/videos-december</id>
    <content type="html"><![CDATA[<ul>
<li><a href="/2014/12/15/videos-december#debt">The Technical Debt Trap</a> by Doc Norton</li>
<li><a href="/2014/12/15/videos-december#brown">Software Architecture vs Code</a> by Simon Brown</li>
<li><a href="/2014/12/15/videos-december#hacker">One Hacker Way</a> by Erik Meijer</li>
</ul>


<!--more-->


<p><a name="debt"></a></p>

<h2>The Technical Debt Trap by Doc Norton</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/S2pS9hN2Fws" allowfullscreen></iframe></div></p>

<blockquote><p>Technical Debt has become a catch-all phrase for any code that needs to be re-worked. Much like Refactoring has become a catch-all phrase for any activity that involves changing code. These fundamental misunderstandings and comfortable yet mis-applied metaphors have resulted in a plethora of poor decisions. What is technical debt? What is not technical debt? Why should we care? What is the cost of misunderstanding? What do we do about it? Doc discusses the origins of the metaphor, what it means today, and how we properly identify and manage technical debt.</p></blockquote>

<p><a name="brown"></a></p>

<h2>Software Architecture vs Code by Simon Brown</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/ehH3UGdSwPo" allowfullscreen></iframe></div></p>

<blockquote><p>Software architecture and coding are often seen as mutually exclusive disciplines, despite us referring to higher level abstractions when we talk about our software. You&rsquo;ve probably heard others on your team talking about components, services and layers rather than objects when they&rsquo;re having discussions. Take a look at the codebase though. Can you clearly see these abstractions or does the code reflect some other structure? If so, why is there no clear mapping between the architecture and the code? Why do those architecture diagrams that you have on the wall say one thing whereas your code says another? In fact, why is it so hard to automatically generate a decent architecture diagram from an existing codebase? Join us to explore this topic further.</p></blockquote>

<p><a name="hacker"></a></p>

<h2>One Hacker Way by Erik Meijer</h2>

<p><div class="embed-video-container"><iframe src="//player.vimeo.com/video/110554082 "></iframe></div></p>

<p>One Hacker Way, a Rational Alternative to Agile</p>

<p>Presented at Reaktor Dev Day 2014</p>

<p><a href="http://reaktor.fi/blog/erik-meijer-software-eating-world/">reaktor.fi/blog/erik-meijer-software-eating-world/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: Shadow Facets of Concurrency]]></title>
    <link href="http://203.softover.com/2013/12/07/rails-shadow-facets-of-concurrency/"/>
    <updated>2013-12-07T09:32:00-08:00</updated>
    <id>http://203.softover.com/2013/12/07/rails-shadow-facets-of-concurrency</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/TV5LEjN6d1U" allowfullscreen></iframe></div></p>

<p>This is my talk at <a href="http://rockymntruby.com">Rocky Mountain Ruby 2013</a>. Slides are available <a href="/concur/rency">here</a>.</p>

<p><blockquote><p>Rails is a framework well known for ease of development. This ease is achieved by a lot of &lsquo;magic&rsquo; that happens behind the scenes. One of pitfalls of such magic is a false sense of safety it gives, including sense of safety from concurrency issues for single-threaded environments. You may never discover any problems before the launch, or even after, while your site traffic is pretty sparse. But here comes a glorious moment of popularity - and together with more traffic it brings more and more concurrency-related problems.</p></p><p><p>In this talk we will look at different aspects of concurrency, from simple ones that are even mentioned in Rails documentation, to more complex problems that even seasoned developers tend to miss or fail to pay sufficient attention to.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Videos to Watch]]></title>
    <link href="http://203.softover.com/2013/09/21/videos/"/>
    <updated>2013-09-21T16:22:00-07:00</updated>
    <id>http://203.softover.com/2013/09/21/videos</id>
    <content type="html"><![CDATA[<p>Good presentations, deserve watching:</p>

<ul>
<li>Deconstructing the Framework by Gary Bernhardt</li>
<li>Agile is the new black by Fred George</li>
<li>Confident Code by Avdi Grimm</li>
<li>Delicious Controversy: Docs &amp; Tests by Thomas Meeks</li>
<li>Boundaries by Gary Bernhardt</li>
</ul>


<!--more-->


<hr />

<h2>Deconstructing the Framework by Gary Bernhardt</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/iUe6tacW3JE" allowfullscreen></iframe></div></p>

<blockquote><p>Rails gives us M, V, C, routes, and helpers. Some people add observers and concerns, among others. We&rsquo;ve standardized on presenters. Service objects are gaining popularity. Uncle Bob wants you to add interactors, request models, response models, and entities.</p>

<p>That&rsquo;s a lot of stuff! Let&rsquo;s step back: ideally, how do all of these things fit together? Does it make sense to have so many different components? How do different web frameworks project these onto actual components? Most importantly: how does this explain the tangled mess in Rails controllers and how we might fix it?</p></blockquote>

<h2>Agile is the new black by Fred George</h2>

<p><div class="embed-video-container"><iframe src="//player.vimeo.com/video/68689393 "></iframe></div></p>

<blockquote><p>&ldquo;This mid­ 80’s declaration from the fashion industry has become synonymous with radical shifts in the norm of any field. Agile provided such a radical shift for traditional waterfall processes. Yet as Agile has matured, it is redefining itself at a pace that rivals the whims of the fashion industry.</p>

<p>This presentation presents not only the (somewhat obvious) shifts from waterfall to Agile, but the second and third generation of shifts within the Agile community itself. Basics such as automated unit tests are falling away (“Deployment is the new unit test”).</p>

<p>The overall message is to continue to question practices, and strive to understand the reasons behind a practice so that you know when it is safe to discard.&#8221;</p></blockquote>

<h2>Confident Code by Avdi Grimm</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/T8J0j2xJFgQ" allowfullscreen></iframe></div></p>

<blockquote><p>Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we&rsquo;ll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns</p></blockquote>

<h2>Delicious Controversy: Docs &amp; Tests by Thomas Meeks</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/9md-GTF_Th8" allowfullscreen></iframe></div></p>

<blockquote><p>Self-documenting code is a pipe dream. TDD (or BDD) is not the panacea of testing. In the pursuit of test coverage we&rsquo;ve forgotten what really matters: getting things done. Lets talk about putting documentation and testing into their proper place. Tools that ease maintenance, help other developers join a project, and reduce bugs.</p>

<p>I&rsquo;m going to go over lessons learned in writing, maintaining, and introducing new developers to 20,000 lines of code. Specifically, how we are testing, documenting, and refactoring our code to stay sane, make the team happier, and get more done.</p></blockquote>

<h2>Boundaries by Gary Bernhardt</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/yTkzNHF6rMs" allowfullscreen></iframe></div></p>

<blockquote><p>Some people test in isolation, mocking everything except the class under test. We&rsquo;ll start with that idea, quickly examine the drawbacks, and ask how we might fix them without losing the benefits. This will send us on a trip through behavior vs. data, mutation vs. immutability, interface vs. data dependencies, how data shape affords parallelism, and what a system optimizing each of these for natural isolation might look like.</p></blockquote>
]]></content>
  </entry>
  
</feed>
