<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Video | 203]]></title>
  <link href="http://203.softover.com/categories/video/atom.xml" rel="self"/>
  <link href="http://203.softover.com/"/>
  <updated>2013-12-07T11:22:04-08:00</updated>
  <id>http://203.softover.com/</id>
  <author>
    <name><![CDATA[Eugene Kalenkovich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails: Shadow Facets of Concurrency]]></title>
    <link href="http://203.softover.com/2013/12/07/rails-shadow-facets-of-concurrency/"/>
    <updated>2013-12-07T09:32:00-08:00</updated>
    <id>http://203.softover.com/2013/12/07/rails-shadow-facets-of-concurrency</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/TV5LEjN6d1U "></iframe></div></p>

<p>This is my talk at <a href="http://rockymntruby.com">Rocky Mountain Ruby 2013</a>. Slides are available <a href="/concur/rency">here</a>.</p>

<!-- more -->


<p><blockquote><p>Rails is a framework well known for ease of development. This ease is achieved by a lot of &lsquo;magic&rsquo; that happens behind the scenes. One of pitfalls of such magic is a false sense of safety it gives, including sense of safety from concurrency issues for single-threaded environments. You may never discover any problems before the launch, or even after, while your site traffic is pretty sparse. But here comes a glorious moment of popularity &ndash; and together with more traffic it brings more and more concurrency-related problems.</p></p><p><p>In this talk we will look at different aspects of concurrency, from simple ones that are even mentioned in Rails documentation, to more complex problems that even seasoned developers tend to miss or fail to pay sufficient attention to.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile is the new black by Fred George]]></title>
    <link href="http://203.softover.com/2013/09/21/agile-is-the-new-black/"/>
    <updated>2013-09-21T17:01:00-07:00</updated>
    <id>http://203.softover.com/2013/09/21/agile-is-the-new-black</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/68689393 "></iframe></div></p>

<!--more-->


<p><blockquote><p>&ldquo;This mid­ 80’s declaration from the fashion industry has become synonymous with radical shifts in the norm of any field. Agile provided such a radical shift for traditional waterfall processes. Yet as Agile has matured, it is redefining itself at a pace that rivals the whims of the fashion industry.</p></p><p><p>This presentation presents not only the (somewhat obvious) shifts from waterfall to Agile, but the second and third generation of shifts within the Agile community itself. Basics such as automated unit tests are falling away (“Deployment is the new unit test”).</p></p><p><p>The overall message is to continue to question practices, and strive to understand the reasons behind a practice so that you know when it is safe to discard.&ldquo;</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deconstructing the Framework by Gary Bernhardt]]></title>
    <link href="http://203.softover.com/2013/09/21/deconstructing-the-framework-by-gary-bernhardt/"/>
    <updated>2013-09-21T16:22:00-07:00</updated>
    <id>http://203.softover.com/2013/09/21/deconstructing-the-framework-by-gary-bernhardt</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/iUe6tacW3JE "></iframe></div></p>

<!-- more -->


<p><blockquote><p>Rails gives us M, V, C, routes, and helpers. Some people add observers and concerns, among others. We&rsquo;ve standardized on presenters. Service objects are gaining popularity. Uncle Bob wants you to add interactors, request models, response models, and entities.</p></p><p><p>That&rsquo;s a lot of stuff! Let&rsquo;s step back: ideally, how do all of these things fit together? Does it make sense to have so many different components? How do different web frameworks project these onto actual components? Most importantly: how does this explain the tangled mess in Rails controllers and how we might fix it?</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confident Code by Avdi Grimm]]></title>
    <link href="http://203.softover.com/2013/08/30/confident-code-by-avdi-grimm/"/>
    <updated>2013-08-30T15:06:00-07:00</updated>
    <id>http://203.softover.com/2013/08/30/confident-code-by-avdi-grimm</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/T8J0j2xJFgQ "></iframe></div></p>

<!-- more -->


<p><blockquote><p>Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we&rsquo;ll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boundaries by Gary Bernhardt]]></title>
    <link href="http://203.softover.com/2013/08/12/boundaries-by-gary-bernhardt/"/>
    <updated>2013-08-12T10:50:00-07:00</updated>
    <id>http://203.softover.com/2013/08/12/boundaries-by-gary-bernhardt</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/yTkzNHF6rMs "></iframe></div></p>

<!-- more -->


<p><blockquote><p>Some people test in isolation, mocking everything except the class under test. We&rsquo;ll start with that idea, quickly examine the drawbacks, and ask how we might fix them without losing the benefits. This will send us on a trip through behavior vs. data, mutation vs. immutability, interface vs. data dependencies, how data shape affords parallelism, and what a system optimizing each of these for natural isolation might look like.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
