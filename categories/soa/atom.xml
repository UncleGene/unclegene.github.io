<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: soa | 203]]></title>
  <link href="http://203.softover.com/categories/soa/atom.xml" rel="self"/>
  <link href="http://203.softover.com/"/>
  <updated>2014-12-02T10:45:54-08:00</updated>
  <id>http://203.softover.com/</id>
  <author>
    <name><![CDATA[Eugene Kalenkovich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Can I Haz Name?]]></title>
    <link href="http://203.softover.com/2014/12/01/ultra-srevices-and-declaration-of-independence/"/>
    <updated>2014-12-01T08:57:59-08:00</updated>
    <id>http://203.softover.com/2014/12/01/ultra-srevices-and-declaration-of-independence</id>
    <content type="html"><![CDATA[<p>All this hype about microservices makes me sad. And not about the concept, but about the name. As I wrote <a href="http://203.softover.com/2014/11/22/shmackroservices/">before</a>, &ldquo;micro&rdquo; in &ldquo;microservices&rdquo; means absolutely nothing. What is worse, it confuses everybody. Again and again I see people focusing on &ldquo;micro&rdquo; and falling into <a href="http://arnon.me/wp-content/uploads/2010/10/Nanoservices.pdf">nanoservices</a> trap.</p>

<blockquote><p><p>Nanoservice is an antipattern where a service is too fine-grained. A nanoservice is a service whose overhead (communications, maintenance, and so on) outweighs its utility.</p>&mdash;Arnon Rotem-Gal-Oz</p></blockquote>

<p>So I decided to look for a better name. It should be sticky and easy to remember. It should not focus on size, or any other questionable aspect. And it may be fine if it still means nothing - as long as this nothing does not have confusing semantics.</p>

<p>Let start with abbreviation. It probably will end with SA - Service Architecture. Let leave RSA to <a href="http://www.reactivemanifesto.org/">Reactive Manifesto</a> camp. NSA - too bad association. BSA - should be reserved for BS Architecture.</p>

<p>I think I like <strong>USA</strong>. Let create <strong><em>Ultra Services Architecture</em></strong>!</p>

<!--more-->


<p>
And ultra is a good prefix for #ultraservices. It can mean anything you want! Ultra-scalable, Ultra-fast. Ultra-happy. And, if you feel very adventurous, you can still try to do ultra-small (just let me know upfront before I try to use your app)</p>

<p>And, as we are talking about USA, it needs</p>

<h3>Declaration of Independence</h3>

<blockquote><p>When in the Course of human events, <strong><em>it becomes necessary</em></strong> for one people <strong><em>to dissolve the</em></strong> political <strong><em>bands which have connected them with another, and to assume</em></strong> among the powers of the earth, <strong><em>the separate and equal station</em></strong> to which the Laws of Nature and of Nature&rsquo;s God entitle them, a decent respect to the opinions of mankind requires that they <strong><em>should declare the causes which impel them to the separation.</em></strong></p></blockquote>

<p>[Ultra] Services have to be independent. Their independence is governed by three main aspects:</p>

<h3>Independent Scalability</h3>

<p>The only way to scale monolithic system is to scale it horizontally. Splitting to independent components allows to scale each component individually. This not only saves your resources, but, most importantly, does not allow parts of the system to starve other parts. You may need to think about independent scalability when you have independent operations (APIs) with:</p>

<ul>
<li>different resource needs (e.g. CPU- vs. memory-bound).</li>
<li>different SLAs (fast vs. slow).</li>
<li>different load (request rate)</li>
<li>different reliability requirements</li>
<li>different clients (e.g. end users vs. API clients)</li>
</ul>


<h3>Independent Lifecycle</h3>

<p>When you have parts of your system evolving at a different pace, you do not want to tie together their delivery cycles. Independent deployment of services gives us an ability to update any service without impacting the whole system, as long as the change is backwards-compatible. And, with <strong><em>well designed</em></strong> services, we are getting also encapsulation of the risk - failing service should fail only some of system functionality, failing component inside a monolith will crash everything.</p>

<h3>Independent Data</h3>

<p>We should never depend on internals of data managed by the services. It is their &ldquo;implementation details&rdquo;. Service should be always free to change underlying data format and/or storage.  Services accessing the same data directly (or even having an easy way to do so) either are already too tightly coupled, or will be tomorrow.</p>

<p>There are only two ways to achieve data independence: to have well-defined <a href="http://martinfowler.com/bliki/BoundedContext.html">bounded context</a> for a service, managed in the independent data store; or to have no data at all (stateless services).</p>

<h2>Applying Independence Test</h2>

<p>With three independence clauses we can create a rule for when it may be a good idea to look at Ultra Services Architecture</p>

<blockquote><p>You should look at splitting your monoliths to services if:</p>

<ul>
<li>you need (and I mean it, need, not want) Independent Scalability and Independent Lifecycle</li>
<li>you can make your Data Independent</li>
</ul>
</blockquote>

<p>And making your data independent (by defining a bounded context and moving it to a separate store) should always be the first step.</p>

<p>BTW, please do not be fooled by the semi-jocking tone of the USA part of the post. I&rsquo;ve started to work on these independence principles way before microservices fad have started, so there was no need for a name.</p>

<p>TL;DR: Name them however you want (though probably not microservices), but always follow three rules of service independence  - Independent Scalability, Independent Lifecycle and Independent Data</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microservices, Macroservices, Shmackroservices: What's in a Name?]]></title>
    <link href="http://203.softover.com/2014/11/22/shmackroservices/"/>
    <updated>2014-11-22T18:05:38-08:00</updated>
    <id>http://203.softover.com/2014/11/22/shmackroservices</id>
    <content type="html"><![CDATA[<p>Over the last few years the new hype took over the software industry: &ldquo;Microservices&rdquo;. It started slowly, with articles and presentations popping here and there, and now it is everywhere. The most interesting part is that the industry still cannot agree on what &ldquo;Microservices&rdquo; really are (or even, how to write them - Microservices, Micro-services or Micro Services)</p>

<p>In March of 2014 James Lewis and Martin Fowler published an <a href="http://martinfowler.com/articles/microservices.html">article</a> in an attempt to summarize the meaning of this term (and contributing to the hype wide spread).</p>

<!--more-->


<hr />

<h3>Interlude: Conspiracy Theory</h3>

<blockquote><p><p>The term &ldquo;microservice&rdquo; was discussed at a workshop of software architects near Venice in May, 2011 to describe what the participants saw as a common architectural style that many of them had been recently exploring. In May 2012, the same group decided on &ldquo;microservices&rdquo; as the most appropriate name.</p> &mdash; James Lewis &amp; Martin Fowler, <a href="http://martinfowler.com/articles/microservices.html">March 25, 2014</a></p></blockquote>

<p>Yep, anonymous workshop of anonymous architects anonymously decided on &ldquo;microservices&rdquo; as the most appropriate name&hellip; BTW, were they all from the same anonymous company?</p>

<hr />

<p>Originally (and, AFAIK, even in the first revision of the Lewis &amp; Fowler article) Microservices had a strong emphasis on Micro, and even referred to a 10-100 LOC size guideline. After getting pretty strong pushback on any size limitations from many practitioners, all the size references were gone (finally a reality check?), and &ldquo;Micro&rdquo; part started to be more and more frequently referred as being &ldquo;just a name&rdquo;</p>

<p>With &ldquo;Micro&rdquo; semantics dropped out of the picture, it became obvious (to many people, though there is no real consensus here neither) that Microservices are just SOA striving for a new identity, because an old one had too bad reputation.</p>

<blockquote class="twitter-tweet" data-cards="hidden" lang="en"><p>I guess it is easier to use a new name (Microservices) rather than say that this is what SOA actually meant - re <a href="http://t.co/gvhxDfDWLG">http://t.co/gvhxDfDWLG</a></p>&mdash; Arnon Rotem-Gal-Oz (@arnonrgo) <a href="https://twitter.com/arnonrgo/status/445188642727034880">March 16, 2014</a></blockquote>




<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/martinfowler">@martinfowler</a> <a href="https://twitter.com/boicy">@boicy</a> but these are the very principles of SOA before vendors does pushed the hub in the middle, i.e. ESB</p>&mdash; Clemens Vasters (@clemensv) <a href="https://twitter.com/clemensv/status/445216182757756929">March 16, 2014</a></blockquote>




<blockquote class="twitter-tweet" data-conversation="none" lang="en"><p><a href="https://twitter.com/UncleGene">@UncleGene</a> Micro-Services are just SOA done properly &#8211; simple functionality, well-defined interfaces, minimal dependencies</p>&mdash; Randy Shoup (@randyshoup) <a href="https://twitter.com/randyshoup/status/530820576810926080">November 7, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<blockquote><p><p><a href="http://service-architecture.blogspot.co.uk/2014/03/microservices-is-soa-for-those-who-know.html">Microservices is SOA, for those who know what SOA is.</a></p> &mdash; Steve Jones March 18, 2014</p></blockquote>

<p>So, to understand what &ldquo;Microservices&rdquo; really are, we should first understand what is SOA (and what is SOA done properly). Rose may smell sweet by any name, but if you step into [something] - you can name it a rose (or micro[something]), but smell will not change until you clean up your shoes.</p>

<p>You can see my &ldquo;tongue-in-cheek&rdquo; definition <a href="http://203.softover.com/2014/11/21/wth-is-soa/">here</a>, please stay tuned for the real one coming soon.</p>

<p>But for now, just one takeaway: &ldquo;Micro&rdquo; in &ldquo;Microservices&rdquo; means <strong>absolutely nothing</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WTH is SOA?]]></title>
    <link href="http://203.softover.com/2014/11/21/wth-is-soa/"/>
    <updated>2014-11-21T14:51:49-08:00</updated>
    <id>http://203.softover.com/2014/11/21/wth-is-soa</id>
    <content type="html"><![CDATA[<p>To start with, we are not discussing <a href="http://en.wikipedia.org/wiki/Sons_of_Anarchy">Sons of Anarchy</a> or <a href="http://en.wikipedia.org/wiki/Society_of_Actuaries">Society of Actuaries</a>. This is about Service-Oriented Architecture. But what is Service-Oriented Architecture?</p>

<p>Our usual suspect, wikipedia, says:</p>

<blockquote><p>Service-oriented architecture (SOA) is a software design and software architecture design pattern based on distinct pieces of software providing application functionality as services to other applications. This is known as service-orientation. It is independent of any vendor, product or technology.[<a href="https://en.wikipedia.org/wiki/Service-oriented_architecture#cite_note-1">1</a>]
&ndash; <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture,">http://en.wikipedia.org/wiki/Service-oriented_architecture,</a> 09/18/2014</p></blockquote>

<p>Let try to digest.</p>

<blockquote><p>architecture [&hellip;] is a software design and software architecture design pattern</p></blockquote>

<p>Awesome! After all these years of debates about differences between architecture and design, in one phrase we can see that they are not only the same, but, at least in the case of SOA, also the same as design pattern!</p>

<blockquote><p>pieces of software providing application functionality as services to other applications</p></blockquote>

<p>OK. Got it. Services are providing functionality as services. And they are pieces of software. And, looking at definition, they are not necessarily applications, but have to provide application functionality, and have to be used by applications. Basically, &ldquo;application of service applications as services to application services&rdquo;</p>

<blockquote><p>This is known as service-orientation.</p></blockquote>

<p>What &ldquo;this&rdquo;? SOA?</p>

<!--more-->


<p>The only clear and unambiguous part is &ldquo;It is independent of any vendor, product or technology&rdquo;, so we&rsquo;ll set it aside for the future reuse.</p>

<p>Curiously enough, the reference there points to the first chapter of &ldquo;<a href="http://msdn.microsoft.com/en-us/library/bb833022.aspx">SOA in the Real World</a>&rdquo; book  by some anonymous author, that gives absolutely different, and much more vague definition:</p>

<blockquote><p>[SOA is] A loosely-coupled architecture designed to meet the business needs of the organization.</p></blockquote>

<p>Whoa, whoa, is it assuming that there can be an architecture that is designed not to meet business needs? Quite possible, but as we do not want get fired, let skip this part:</p>

<blockquote><p>SOA is a loosely-coupled architecture.</p></blockquote>

<p>Nice. Does everybody understand now what are we going to talk about?</p>

<p>Let look for other definitions. Here is the <a href="http://www.opengroup.org/soa/source-book/togaf/soadef.htm">next one</a>, and as it is compound definition, let consume it piece-by-piece.</p>

<blockquote><p>Service-Oriented Architecture (SOA) is an architectural style that supports service-orientation.</p></blockquote>

<p>I absolutely and completely agree. I can continue the line: Object-Oriented Design (OOD) is a design style that supports object-orientation.  Test-Driven Development (TDD) is a development style that is driven by tests. Central Intelligence Agency is an intelligence agency that is central (or an agency whose intelligence is central? Looks like this one may benefit from such definition).</p>

<p>Let continue:</p>

<blockquote><p>Service-orientation is a way of thinking in terms of services and service-based development and the outcomes of services.</p></blockquote>

<p>No comments. Though to make it better, I&rsquo;d rather mention services couple more times. Going forward.</p>

<blockquote><p>A service:
- Is a logical representation of a repeatable business activity that has a specified outcome (e.g., check customer - credit, provide weather data, consolidate drilling reports)
- Is self-contained
- May be composed of other services
- Is a “black box” to consumers of the service</p></blockquote>

<p>When I first started to read this, I&rsquo;ve stumbled on the first point&rsquo;s &ldquo;business activity&rdquo;. Not being sure what is really meant here, I looked couple paragraphs below, and found some clarification. Here is  a statement about &ldquo;SOA architectural style&rdquo; (yes, defined separately):</p>

<blockquote><p>It is based on the design of the services – <strong><em>which mirror real-world business activities</em></strong> – comprising the enterprise (or inter-enterprise) business processes.</p></blockquote>

<p>Seriously? Services are required to mirror what exists in the &ldquo;real world&rdquo;? Let replay this statement in other direction: &ldquo;Hello, operator? Could you please help me with transcoding my video file? Here are my bits: 1,0,0,1,0&hellip;.&rdquo;</p>

<p>Honestly, I have no clue what &ldquo;self-contained&rdquo; and &ldquo;may be composed of other services&rdquo; mean, especially - in combination. &ldquo;Black box&rdquo; is fine, we&rsquo;ll add it to our collection.</p>

<p>BTW,</p>

<blockquote><p>This definition of SOA was produced by the SOA Definition team of The Open Group SOA Working Group.</p></blockquote>

<p>This phrase itself, IMHO, deserves pretty long meditation. Even parsing and tokenization are not trivial.</p>

<p>Let combining all pieces (that we decided to keep) together. SOA is:</p>

<blockquote><p>A loosely-coupled architecture created with black boxes, independent of any vendor, product or technology</p></blockquote>
]]></content>
  </entry>
  
</feed>
