<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 203]]></title>
  <link href="http://203.softover.com/categories/ruby/atom.xml" rel="self"/>
  <link href="http://203.softover.com/"/>
  <updated>2013-09-17T09:00:33-07:00</updated>
  <id>http://203.softover.com/</id>
  <author>
    <name><![CDATA[Eugene Kalenkovich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Numeric Fun]]></title>
    <link href="http://203.softover.com/2013/09/17/numeric-fun/"/>
    <updated>2013-09-17T08:49:00-07:00</updated>
    <id>http://203.softover.com/2013/09/17/numeric-fun</id>
    <content type="html"><![CDATA[<p>Today I was browsing Rails codebase (sometimes people do weird things for fun), and found an interesting piece of code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/time/calculations.rb#L105">https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/time/calculations.rb#L105</a> </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:days</span><span class="o">]</span><span class="p">,</span> <span class="n">partial_days</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:days</span><span class="o">].</span><span class="n">divmod</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This sparkled my interest: what is <em>divmod</em>, especially &ndash; its pretty harsh form <em>divmod(1)</em>? Quick search through documentation &ndash; and it starts to make perfect sense:
<q>Returns an array containing the quotient and modulus obtained by dividing num by numeric</q>; especially if you instantly remember what is <q>quotient</q> and <q>modulus</q>. Looks like example table in documentation is designed to confuse (including expected output of multiple methods), but for the special case of a <em>positive float.divmod(1)</em> there is much simpler explanation: it just splits a positive floating point number to its integer and fractional parts (+/&ndash; error).</p>

<!--more-->


<p>Or, in other &ldquo;words&rdquo; (this one is true for negative numbers too):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">float</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">[</span><span class="n">float</span><span class="o">.</span><span class="n">floor</span><span class="p">,</span> <span class="n">float</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="n">float</span><span class="o">.</span><span class="n">floor</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Examples:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;1.5.divmod(1)</span>
</span><span class='line'><span class="sr">=&gt; [1, 0.5]</span>
</span><span class='line'><span class="sr">1.4.divmod(1)</span>
</span><span class='line'><span class="sr">=&gt; [1, 0.3999999999999999]</span>
</span><span class='line'><span class="sr">-5.5.divmod(1)</span>
</span><span class='line'><span class="sr">=&gt; [-6, 0.5]</span>
</span><span class='line'><span class="sr">-5.3.divmod(1)</span>
</span><span class='line'><span class="sr">=&gt; [-6, 0.7000000000000002]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>Let look at other surprising (for me) Numeric methods. For most of them I can see why they can be used internally, but I have hard time imagine why they are exposed &ldquo;to public&rdquo;</p>

<h3>#abs2</h3>

<p>Returns square of self. Nothing to say, other than interesting choice of name. I would never guess what it means.</p>

<h3>#coerce(numeric)</h3>

<p>Returns an array of target and argument if they are of the same type, converts both to Float if they have different types. It would be interesting to see a practical (outside of Ruby core) use of this.</p>

<h3>#conj, #conjugate</h3>

<p>The most weird one. Returns self.</p>

<h3>#numerator, #denominator</h3>

<p>I am excited about this pair, and really want to find a practical use for them. Documentation is <em>extremely</em> clear: it states that denominator returns denominator, and numerator &ndash; surprise! &ndash; numerator. What they really do is they return smallest integer numerator and denominator (separately) of a fraction that is equal to the message target.</p>

<p>Taking separately &ndash; try to make sense of these results:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;1.2345.denominator</span>
</span><span class='line'><span class="sr">=&gt; 4503599627370496</span>
</span><span class='line'><span class="sr">4.567.numerator</span>
</span><span class='line'><span class="sr">=&gt; 642748109318783</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>Together &ndash; here is a simple code example (unfortunately not leading to a practical use):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;a = 1.2345</span>
</span><span class='line'><span class="sr">=&gt; 1.2345</span>
</span><span class='line'><span class="sr">a.numerator.fdiv(a.denominator) == a</span>
</span><span class='line'><span class="sr">=&gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<h3>#fdiv</h3>

<p>Float division. not sure yet, but I like it better than its practical equivalents
<em>a / b.to_f</em> or <em>a.to_f / b</em> &ndash; seems more explicit.</p>

<h3>#nonzero?</h3>

<p>Thank you, Ruby, for consistency! All other xxx? methods return <em>true</em> or <em>false</em>. But not this one. Returns <em>self</em> where you&rsquo;d expect true, and <em>nil</em> for <em>false</em>. Usage example in documentation</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="sx">%w( z Bb bB bb BB a aA Aa AA A )</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">sort</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">downcase</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span><span class="o">.</span><span class="n">nonzero?</span> <span class="o">||</span> <span class="n">a</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=&gt;</span> <span class="n">b</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span>   <span class="c1">#=&gt; [&amp;ldquo;A&amp;rdquo;, &amp;ldquo;a&amp;rdquo;, &amp;ldquo;AA&amp;rdquo;, &amp;ldquo;Aa&amp;rdquo;, &amp;ldquo;aA&amp;rdquo;, &amp;ldquo;BB&amp;rdquo;, &amp;ldquo;Bb&amp;rdquo;, &amp;ldquo;bB&amp;rdquo;, &amp;ldquo;bb&amp;rdquo;, &amp;ldquo;z&amp;rdquo;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>does not give any clarity for why this inconsistency is necessary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Confident Code by Avdi Grimm]]></title>
    <link href="http://203.softover.com/2013/08/30/confident-code-by-avdi-grimm/"/>
    <updated>2013-08-30T15:06:00-07:00</updated>
    <id>http://203.softover.com/2013/08/30/confident-code-by-avdi-grimm</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/T8J0j2xJFgQ "></iframe></div></p>

<!-- more -->


<p><blockquote><p>Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we&rsquo;ll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boundaries by Gary Bernhardt]]></title>
    <link href="http://203.softover.com/2013/08/12/boundaries-by-gary-bernhardt/"/>
    <updated>2013-08-12T10:50:00-07:00</updated>
    <id>http://203.softover.com/2013/08/12/boundaries-by-gary-bernhardt</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/yTkzNHF6rMs "></iframe></div></p>

<!-- more -->


<p><blockquote><p>Some people test in isolation, mocking everything except the class under test. We&rsquo;ll start with that idea, quickly examine the drawbacks, and ask how we might fix them without losing the benefits. This will send us on a trip through behavior vs. data, mutation vs. immutability, interface vs. data dependencies, how data shape affords parallelism, and what a system optimizing each of these for natural isolation might look like.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Split the Difference]]></title>
    <link href="http://203.softover.com/2013/07/11/split-the-difference/"/>
    <updated>2013-07-11T09:01:00-07:00</updated>
    <id>http://203.softover.com/2013/07/11/split-the-difference</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (split.rb)</span> <a href='/downloads/code/split.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot; To</span><span class="se">\t</span><span class="s2">be  or</span><span class="se">\n</span><span class="s2">not</span><span class="se">\t</span><span class="s2">to  be  &quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/ /</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;&quot;, &quot;To\tbe&quot;, &quot;&quot;, &quot;or\nnot\tto&quot;, &quot;&quot;, &quot;be&quot;]</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/( )/</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;&quot;, &quot; &quot;, &quot;To\tbe&quot;, &quot; &quot;, &quot;&quot;, &quot; &quot;, &quot;or\nnot\tto&quot;, &quot; &quot;, &quot;&quot;, &quot; &quot;, &quot;be&quot;, &quot; &quot;, &quot;&quot;, &quot; &quot;]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span> <span class="sr">/\s+/</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;&quot;, &quot;To&quot;, &quot;be&quot;, &quot;or&quot;, &quot;not&quot;, &quot;to&quot;, &quot;be&quot;]</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;To&quot;, &quot;be&quot;, &quot;or&quot;, &quot;not&quot;, &quot;to&quot;, &quot;be&quot;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>From the ruby docs:
<blockquote><p>If pattern is a single space, str is split on whitespace, with leading whitespace and runs of contiguous whitespace characters ignored.</p></blockquote></p>

<p>Note that split by regex without groups omits trailing matches. Undocumented?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delicious Controversy: Docs &amp; Tests by Thomas Meeks]]></title>
    <link href="http://203.softover.com/2013/07/01/delicious-controversy-docs-and-tests-by-thomas-meeks/"/>
    <updated>2013-07-01T08:46:00-07:00</updated>
    <id>http://203.softover.com/2013/07/01/delicious-controversy-docs-and-tests-by-thomas-meeks</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/9md-GTF_Th8 "></iframe></div></p>

<!-- more -->


<p><blockquote><p>Self-documenting code is a pipe dream. TDD (or BDD) is not the panacea of testing. In the pursuit of test coverage we&rsquo;ve forgotten what really matters: getting things done. Lets talk about putting documentation and testing into their proper place. Tools that ease maintenance, help other developers join a project, and reduce bugs.<br/>I&rsquo;m going to go over lessons learned in writing, maintaining, and introducing new developers to 20,000 lines of code. Specifically, how we are testing, documenting, and refactoring our code to stay sane, make the team happier, and get more done.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
