<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[203]]></title>
  <link href="http://203.softover.com/atom.xml" rel="self"/>
  <link href="http://203.softover.com/"/>
  <updated>2014-11-21T15:02:11-08:00</updated>
  <id>http://203.softover.com/</id>
  <author>
    <name><![CDATA[Eugene Kalenkovich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WTH Is SOA?]]></title>
    <link href="http://203.softover.com/2014/11/21/wth-is-soa/"/>
    <updated>2014-11-21T14:51:49-08:00</updated>
    <id>http://203.softover.com/2014/11/21/wth-is-soa</id>
    <content type="html"><![CDATA[<p>To start with, we are not discussing <a href="http://en.wikipedia.org/wiki/Sons_of_Anarchy">Sons of Anarchy</a> or <a href="http://en.wikipedia.org/wiki/Society_of_Actuaries">Society of Actuaries</a>. This is about Service-Oriented Architecture. But what is Service-Oriented Architecture?</p>

<p>Our usual suspect, wikipedia, says:</p>

<blockquote><p>Service-oriented architecture (SOA) is a software design and software architecture design pattern based on distinct pieces of software providing application functionality as services to other applications. This is known as service-orientation. It is independent of any vendor, product or technology.[<a href="https://en.wikipedia.org/wiki/Service-oriented_architecture#cite_note-1">1</a>]
&ndash; <a href="http://en.wikipedia.org/wiki/Service-oriented_architecture,">http://en.wikipedia.org/wiki/Service-oriented_architecture,</a> 09/18/2014</p></blockquote>

<p>Let try to digest.</p>

<blockquote><p>architecture [&hellip;] is a software design and software architecture design pattern</p></blockquote>

<p>Awesome! After all these years of debates about differences between architecture and design, in one phrase we can see that they are not only the same, but, at least in the case of SOA, also the same as design pattern!</p>

<blockquote><p>pieces of software providing application functionality as services to other applications</p></blockquote>

<p>OK. Got it. Services are providing functionality as services. And they are pieces of software. And, looking at definition, they are not necessarily applications, but have to provide application functionality, and have to be used by applications. Basically, &ldquo;application of service applications as services to application services&rdquo;</p>

<blockquote><p>This is known as service-orientation.</p></blockquote>

<p>What &ldquo;this&rdquo;? SOA?</p>

<!--more-->


<p>The only clear and unambiguous part is &ldquo;It is independent of any vendor, product or technology&rdquo;, so we&rsquo;ll set it aside for the future reuse.</p>

<p>Curiously enough, the reference there points to the first chapter of &ldquo;<a href="http://msdn.microsoft.com/en-us/library/bb833022.aspx">SOA in the Real World</a>&rdquo; book  by some anonymous author, that gives absolutely different, and much more vague definition:</p>

<blockquote><p>[SOA is] A loosely-coupled architecture designed to meet the business needs of the organization.</p></blockquote>

<p>Whoa, whoa, is it assuming that there can be an architecture that is designed not to meet business needs? Quite possible, but as we do not want get fired, let skip this part:</p>

<blockquote><p>SOA is a loosely-coupled architecture.</p></blockquote>

<p>Nice. Does everybody understand now what are we going to talk about?</p>

<p>Let look for other definitions. Here is the <a href="http://www.opengroup.org/soa/source-book/togaf/soadef.htm">next one</a>, and as it is compound definition, let consume it piece-by-piece.</p>

<blockquote><p>Service-Oriented Architecture (SOA) is an architectural style that supports service-orientation.</p></blockquote>

<p>I absolutely and completely agree. I can continue the line: Object-Oriented Design (OOD) is a design style that supports object-orientation.  Test-Driven Development (TDD) is a development style that is driven by tests. Central Intelligence Agency is an intelligence agency that is central (or an agency whose intelligence is central? Looks like this one may benefit from such definition).</p>

<p>Let continue:</p>

<blockquote><p>Service-orientation is a way of thinking in terms of services and service-based development and the outcomes of services.</p></blockquote>

<p>No comments. Though to make it better, I&rsquo;d rather mention services couple more times. Going forward.</p>

<blockquote><p>A service:
- Is a logical representation of a repeatable business activity that has a specified outcome (e.g., check customer - credit, provide weather data, consolidate drilling reports)
- Is self-contained
- May be composed of other services
- Is a “black box” to consumers of the service</p></blockquote>

<p>When I first started to read this, I&rsquo;ve stumbled on the first point&rsquo;s &ldquo;business activity&rdquo;. Not being sure what is really meant here, I looked couple paragraphs below, and found some clarification. Here is  a statement about &ldquo;SOA architectural style&rdquo; (yes, defined separately):</p>

<blockquote><p>It is based on the design of the services – <strong><em>which mirror real-world business activities</em></strong> – comprising the enterprise (or inter-enterprise) business processes.</p></blockquote>

<p>Seriously? Services are required to mirror what exists in the &ldquo;real world&rdquo;? Let replay this statement in other direction: &ldquo;Hello, operator? Could you please help me with transcoding my video file? Here are my bits: 1,0,0,1,0&hellip;.&rdquo;</p>

<p>Honestly, I have no clue what &ldquo;self-contained&rdquo; and &ldquo;may be composed of other services&rdquo; mean, especially - in combination. &ldquo;Black box&rdquo; is fine, we&rsquo;ll add it to our collection.</p>

<p>BTW,</p>

<blockquote><p>This definition of SOA was produced by the SOA Definition team of The Open Group SOA Working Group.</p></blockquote>

<p>This phrase itself, IMHO, deserves pretty long meditation. Even parsing and tokenization are not trivial.</p>

<p>Let combining all pieces (that we decided to keep) together. SOA is:</p>

<blockquote><p>A loosely-coupled architecture created with black boxes, independent of any vendor, product or technology</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails: Shadow Facets of Concurrency]]></title>
    <link href="http://203.softover.com/2013/12/07/rails-shadow-facets-of-concurrency/"/>
    <updated>2013-12-07T09:32:00-08:00</updated>
    <id>http://203.softover.com/2013/12/07/rails-shadow-facets-of-concurrency</id>
    <content type="html"><![CDATA[<div class="embed-video-container"><iframe src="//www.youtube.com/embed/TV5LEjN6d1U" allowfullscreen></iframe></div>


<p>This is my talk at <a href="http://rockymntruby.com">Rocky Mountain Ruby 2013</a>. Slides are available <a href="http://203.softover.com/concur/rency">here</a>.</p>

<!-- more -->




<blockquote><p>Rails is a framework well known for ease of development. This ease is achieved by a lot of &#8216;magic&#8217; that happens behind the scenes. One of pitfalls of such magic is a false sense of safety it gives, including sense of safety from concurrency issues for single-threaded environments. You may never discover any problems before the launch, or even after, while your site traffic is pretty sparse. But here comes a glorious moment of popularity - and together with more traffic it brings more and more concurrency-related problems.</p><p>In this talk we will look at different aspects of concurrency, from simple ones that are even mentioned in Rails documentation, to more complex problems that even seasoned developers tend to miss or fail to pay sufficient attention to.</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Videos to Watch]]></title>
    <link href="http://203.softover.com/2013/09/21/videos/"/>
    <updated>2013-09-21T16:22:00-07:00</updated>
    <id>http://203.softover.com/2013/09/21/videos</id>
    <content type="html"><![CDATA[<p>Good presentations, deserve watching:</p>

<ul>
<li>Deconstructing the Framework by Gary Bernhardt</li>
<li>Agile is the new black by Fred George</li>
<li>Confident Code by Avdi Grimm</li>
<li>Delicious Controversy: Docs &amp; Tests by Thomas Meeks</li>
<li>Boundaries by Gary Bernhardt</li>
</ul>


<!--more-->


<hr />

<h2>Deconstructing the Framework by Gary Bernhardt</h2>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/iUe6tacW3JE" allowfullscreen></iframe></div>


<blockquote><p>Rails gives us M, V, C, routes, and helpers. Some people add observers and concerns, among others. We&rsquo;ve standardized on presenters. Service objects are gaining popularity. Uncle Bob wants you to add interactors, request models, response models, and entities.</p>

<p>That&rsquo;s a lot of stuff! Let&rsquo;s step back: ideally, how do all of these things fit together? Does it make sense to have so many different components? How do different web frameworks project these onto actual components? Most importantly: how does this explain the tangled mess in Rails controllers and how we might fix it?</p></blockquote>

<h2>Agile is the new black by Fred George</h2>

<div class="embed-video-container"><iframe src="//player.vimeo.com/video/68689393 "></iframe></div>


<blockquote><p>&ldquo;This mid­ 80’s declaration from the fashion industry has become synonymous with radical shifts in the norm of any field. Agile provided such a radical shift for traditional waterfall processes. Yet as Agile has matured, it is redefining itself at a pace that rivals the whims of the fashion industry.</p>

<p>This presentation presents not only the (somewhat obvious) shifts from waterfall to Agile, but the second and third generation of shifts within the Agile community itself. Basics such as automated unit tests are falling away (“Deployment is the new unit test”).</p>

<p>The overall message is to continue to question practices, and strive to understand the reasons behind a practice so that you know when it is safe to discard.&#8221;</p></blockquote>

<h2>Confident Code by Avdi Grimm</h2>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/T8J0j2xJFgQ" allowfullscreen></iframe></div>


<blockquote><p>Are your methods timid? Do they constantly second-guess themselves, checking for nil values, errors, and unexpected input? Even the cleanest Ruby codebases can become littered over time with nil checks, error handling, and other interruptions which steal attention away from the essential purpose of the code. This talk will discuss strategies for writing your Ruby classes and methods in a confident, straightforward style; without sacrificing functionality or robustness. In the process, we&rsquo;ll cover concepts and techniques points including: The narrative style of method construction The four parts of a method Three strategies for dealing with uncertain input Massaging input with coercion and the Decorator pattern Lightweight preconditions Exterminating nils from your code The chaining and iterative styles of method construction Eliminating conditionals with the Special Case and Null Object patterns Isolating errors with the Bouncer and Checked Method patterns</p></blockquote>

<h2>Delicious Controversy: Docs &amp; Tests by Thomas Meeks</h2>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/9md-GTF_Th8" allowfullscreen></iframe></div>


<blockquote><p>Self-documenting code is a pipe dream. TDD (or BDD) is not the panacea of testing. In the pursuit of test coverage we&rsquo;ve forgotten what really matters: getting things done. Lets talk about putting documentation and testing into their proper place. Tools that ease maintenance, help other developers join a project, and reduce bugs.</p>

<p>I&rsquo;m going to go over lessons learned in writing, maintaining, and introducing new developers to 20,000 lines of code. Specifically, how we are testing, documenting, and refactoring our code to stay sane, make the team happier, and get more done.</p></blockquote>

<h2>Boundaries by Gary Bernhardt</h2>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/yTkzNHF6rMs" allowfullscreen></iframe></div>


<blockquote><p>Some people test in isolation, mocking everything except the class under test. We&rsquo;ll start with that idea, quickly examine the drawbacks, and ask how we might fix them without losing the benefits. This will send us on a trip through behavior vs. data, mutation vs. immutability, interface vs. data dependencies, how data shape affords parallelism, and what a system optimizing each of these for natural isolation might look like.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Numeric Fun]]></title>
    <link href="http://203.softover.com/2013/09/17/numeric-fun/"/>
    <updated>2013-09-17T08:49:00-07:00</updated>
    <id>http://203.softover.com/2013/09/17/numeric-fun</id>
    <content type="html"><![CDATA[<p>Today I was browsing Rails codebase (sometimes people do weird things for fun), and found an interesting piece of code:</p>

<figure class='code'><figcaption><span>https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/time/calculations.rb#L105 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">options</span><span class="o">[</span><span class="ss">:days</span><span class="o">]</span><span class="p">,</span> <span class="n">partial_days</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:days</span><span class="o">].</span><span class="n">divmod</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This sparkled my interest: what is <em>divmod</em>, especially - its pretty harsh form <em>divmod(1)</em>? Quick search through documentation - and it starts to make perfect sense:
<q>Returns an array containing the quotient and modulus obtained by dividing num by numeric</q>; especially if you instantly remember what is <q>quotient</q> and <q>modulus</q>. Looks like example table in documentation is designed to confuse (including expected output of multiple methods), but for the special case of a <em>positive float.divmod(1)</em> there is much simpler explanation: it just splits a positive floating point number to its integer and fractional parts (+/- error).</p>

<!--more-->


<p>Or, in other &ldquo;words&rdquo; (this one is true for negative numbers too):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">float</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">[</span><span class="n">float</span><span class="o">.</span><span class="n">floor</span><span class="p">,</span> <span class="n">float</span> <span class="o">-</span> <span class="n">float</span><span class="o">.</span><span class="n">floor</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Examples:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3999999999999999</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">-</span><span class="mi">5</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">-</span><span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[-</span><span class="mi">6</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">7000000000000002</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let look at other surprising Numeric methods (ones that I either never saw or successfully forgot about).</p>

<h3>#abs2</h3>

<p>Returns square of self. Nothing to say, other than interesting choice of name. I would never guess what it means.</p>

<h3>#coerce(numeric)</h3>

<p>Returns an array of a target and an argument if they are of the same type, converts both to Float if they have different types. It would be interesting to see a practical (not in the core code) use of this.</p>

<h3>#conj, #conjugate</h3>

<p>Returns self for Numeric. Probably - no use for non-Complex numbers</p>

<h3>#numerator, #denominator</h3>

<p>I am excited about this pair, and really want to find a practical use for them. Documentation is <em>extremely</em> clear: it states that denominator returns denominator, and numerator - surprise! - numerator. Makes perfect sense for Rational, but sounds weird for all other types. In reality these methods return numerator and denominator of a Numeric converted to a Rational</p>

<p>Taking out of the context - try to make sense out of these results:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">2345</span><span class="o">.</span><span class="n">denominator</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">4503599627370496</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">2345</span><span class="o">.</span><span class="n">numerator</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">5559693739988877</span>
</span></code></pre></td></tr></table></div></figure>


<p>Together - much better</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">2345</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">2345</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">to_r</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">(</span><span class="mi">5559693739988877</span><span class="o">/</span><span class="mi">4503599627370496</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">numerator</span><span class="o">.</span><span class="n">fdiv</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span> <span class="o">==</span> <span class="n">a</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>I could find only one &ldquo;valid&rdquo; use for <em>#denominator</em> for non-rational numbers - simplify (is it really simplification?) the check if any number is &ldquo;practically an integer&rdquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">123</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">123</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">to_f</span> <span class="o">==</span> <span class="n">a</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">denominator</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>For <em>#numerator</em> I was able to find only pretty bad usage (not sure who started it as a pattern):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">days_until</span><span class="p">(</span><span class="n">date</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">date</span> <span class="o">-</span> <span class="no">Date</span><span class="o">.</span><span class="n">today</span><span class="p">)</span><span class="o">.</span><span class="n">numerator</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problems here:</p>

<ul>
<li>for a non-manipulated Date input, it is no better than <em>#.to_i</em></li>
<li>for calculated dates - it is much worse than <em>#to_i</em> as it will purely lie to you.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">days_until</span><span class="p">(</span><span class="no">Date</span><span class="o">.</span><span class="n">today</span> <span class="o">+</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">13</span>
</span></code></pre></td></tr></table></div></figure>


<h3>#fdiv</h3>

<p>Float division. Not sure yet, but I think I like it better than its practical equivalents
<em>a / b.to_f</em> or <em>a.to_f / b</em> - seems more explicit.</p>

<h3>#nonzero?</h3>

<p>Thank you, Ruby, for consistency! All other xxx? methods return <em>true</em> or <em>false</em>. But not this one. Returns <em>self</em> where you&rsquo;d expect true, and <em>nil</em> for <em>false</em>. Usage example in documentation</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="sx">%w( z Bb bB bb BB a aA Aa AA A )</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">sort</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">downcase</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span><span class="o">.</span><span class="n">nonzero?</span> <span class="o">||</span> <span class="n">a</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span> <span class="p">}</span>
</span><span class='line'><span class="n">b</span>   <span class="c1">#=&gt; [&quot;A&quot;, &quot;a&quot;, &quot;AA&quot;, &quot;Aa&quot;, &quot;aA&quot;, &quot;BB&quot;, &quot;Bb&quot;, &quot;bB&quot;, &quot;bb&quot;, &quot;z&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>does not give any clarity for why this inconsistency is necessary. This metthod would make much more sense to me without &ldquo;?&rdquo;&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curious First]]></title>
    <link href="http://203.softover.com/2013/09/15/curious-first/"/>
    <updated>2013-09-15T09:40:00-07:00</updated>
    <id>http://203.softover.com/2013/09/15/curious-first</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span> (first_last.rb)</span> <a href='http://203.softover.com/downloads/code/first_last.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">drop_table</span> <span class="ss">:records</span> <span class="k">if</span> <span class="n">table_exists?</span> <span class="ss">:records</span>
</span><span class='line'>  <span class="n">create_table</span> <span class="ss">:records</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Record</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CuriousFirstTest</span> <span class="o">&lt;</span> <span class="ss">MiniTest</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_first_last</span>
</span><span class='line'>    <span class="n">r</span> <span class="o">=</span> <span class="no">Record</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>    <span class="no">Record</span><span class="o">.</span><span class="n">create</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="n">touch</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Record</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>    <span class="n">assert</span> <span class="no">Record</span><span class="o">.</span><span class="n">first</span> <span class="o">!=</span> <span class="no">Record</span><span class="o">.</span><span class="n">last</span><span class="p">,</span> <span class="s1">&#39;The first of 2 records is also the last!&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What are we doing here? We create two records, touching first (this updates the record timestamps), and making sure that the first record is not the same as the last one. Perfectly valid assumption, that <strong><em>almost</em></strong> works.</p>

<p>The test succeeds on SQLite and MySQL (latter - with various engines), but fails on PostgreSQL.</p>

<!--more-->


<p>Is it a database fault? Not really. Rails (before 4.0) used a strange asymmetric approach: #last (when statement do not have any explicit order) adds ordering by primary key, but #first does not add anything, thus using default database ordering. No database actually guarantees what is implicit order, but there is still some consistency: at least in simple cases, MySQL always maintains primary key order, but PostgreSQL places most recently modified records at the end.</p>

<p>Bug? I’d say yes, but… This is not the bug that is going to be fixed. Apparently there are developers “in the wild” that managed to rely on this behavior. Thus – this behavior was effectively <a href="https://github.com/rails/rails/issues/11774#issuecomment-24336831">declared “a feature, not a bug”</a>&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Process]]></title>
    <link href="http://203.softover.com/2013/09/13/design-process/"/>
    <updated>2013-09-13T12:41:00-07:00</updated>
    <id>http://203.softover.com/2013/09/13/design-process</id>
    <content type="html"><![CDATA[<p>Yesterday I&rsquo;ve attended my daughter&rsquo;s &ldquo;Curriculum Night&rdquo; (yes, I am a very good and responsible dad, I even managed not only to recall where the school is, but also to successfully follow my wife&rsquo;s instructions on how to find the classroom).</p>

<p>Listening to the teacher&rsquo;s presentation, I was surprised by how process-oriented the education is (not having US education experience myself). Here is one of the processes that were presented by the teacher as a part of 5th grade curriculum:</p>

<h3>Design Process</h3>

<ol>
<li>State the Problem</li>
<li>Gather Information</li>
<li>Explore Ideas</li>
<li>Select a Solution</li>
<li>Test and Evaluate</li>
<li>Redesign</li>
</ol>


<p>And this is taught in elementary school! One question that I have now is: did most of software engineers skip the 5th grade? Or this is something new that was added to curriculum less than twenty-something years ago? The &ldquo;Design Process&rdquo; I see again and again, not only with interns or junior engineers, but also with some experienced people:</p>

<ol>
<li>Pick the Task (or Get Assignment)</li>
<li>Pick a Solution</li>
<li>Implement</li>
<li>Try if it Works (sometimes)</li>
<li>Implement Whitebox Tests (only if forced to do testing. In a lot of cases tests are matching implementation one-to-one; if code has bugs – tests are ensuring that bugs are there)</li>
</ol>


<p>Sometimes it even extends to:</p>

<ol start="6">
<li>Restlessly Defend Picked Solution as the Best One</li>
</ol>


<p></p>

<p>Nope. Please, go back to elementaruy school. They can teach you how to do your job!</p>

<!--more-->


<p>All right, all right, I agree, we do not have time for this, and, more important,  our school district is not funded enough to bring you back to school. But I hope you did not skip classes when they tought reading. Or did you? If not, please read what these steps mean (or, at least, how I want you to understand them):</p>

<h3>Design Process for Engineers</h3>

<h4>1. State the Problem</h4>

<p>Describe in your words what is the problem you are trying to address. If you cannot clearly describe the problem – you do not understand it. If your friend does not understand your description - <strong><em>you</em></strong> do not understand it.</p>

<h4>2. Gather Information</h4>

<p>Starting with the most important one – are you really stating the right problem? Or even: did the person that originally stated it understand what she wanted? Is there already a solution for either directly the problem or something similar? How well does it fit your case?</p>

<h4>3. Explore Ideas</h4>

<p>There is a very high probablility that the first idea that comes to your mind is the wrong one. And do not forget to continue exploring on all steps. And please, PLEASE, do not limit yourself to your ideas only. There are a lot of smart people around.</p>

<h4>4. Select a Solution</h4>

<p>Remember: there is no selection if you have only one solution.</p>

<h4>5. Test and Evaluate</h4>

<p>Test not what you did, but whether the problem was solved. Evaluate all steps that were done before – starting from restating the problem. Quite possible that with all new information you have now your understanding of the problem may change.</p>

<p>And one of the most important evaluation aspects – decision whether you have to go to the step #6 or not. Understanding of what is &ldquo;good enough&rdquo; comes with experience, so do not trust yourself if you lack one.</p>

<h4>6. Redesign</h4>

<p>Return to #1. Always. Yes, I know, you think you are ready for #4. Forget what you see at this moment as a &ldquo;better solution&rdquo; – you are wrong (even if you are right!).</p>

<h3>Bonus #1: Investigation Process (Elementary School Edition)</h3>

<ol>
<li>Question</li>
<li>Prediction</li>
<li>Materials</li>
<li>Procedure</li>
<li>Data/Results</li>
<li>Conclusion</li>
</ol>


<h3>Bonus #2: Writing Process (Elemenatry School Edition)</h3>

<ol>
<li>Prewrite</li>
<li>Rough Draft</li>
<li>Revise</li>
<li>Edit</li>
<li>Publish</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HowTo: Reset Your MySQL Root Password]]></title>
    <link href="http://203.softover.com/2013/08/30/howto-reset-your-mysql-root-password/"/>
    <updated>2013-08-30T11:06:00-07:00</updated>
    <id>http://203.softover.com/2013/08/30/howto-reset-your-mysql-root-password</id>
    <content type="html"><![CDATA[<p>In case you forgot your root password for MySQL installed with <a href="http://brew.sh/">Homebrew</a> on OS X Mountain Lion.</p>

<figure class='code'><figcaption><span> (reroot.sh)</span> <a href='http://203.softover.com/downloads/code/reroot.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
</span><span class='line'>/usr/local/opt/mysql/bin/mysqld_safe --skip-grant-tables --skip-networking &amp;
</span><span class='line'>mysql -e <span class="s2">&quot;UPDATE mysql.user SET Password=PASSWORD(&#39;new password&#39;) WHERE User=&#39;root&#39;; FLUSH PRIVILEGES;&quot;</span>
</span><span class='line'>/usr/local/bin/mysql.server stop
</span><span class='line'>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist
</span></code></pre></td></tr></table></div></figure>


<p>Different versions may have different paths to be used with launchctl load/unload</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Split the Difference]]></title>
    <link href="http://203.softover.com/2013/07/11/split-the-difference/"/>
    <updated>2013-07-11T09:01:00-07:00</updated>
    <id>http://203.softover.com/2013/07/11/split-the-difference</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span> (split.rb)</span> <a href='http://203.softover.com/downloads/code/split.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot; To</span><span class="se">\t</span><span class="s2">be  or</span><span class="se">\n</span><span class="s2">not</span><span class="se">\t</span><span class="s2">to  be  &quot;</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/ /</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;&quot;, &quot;To\tbe&quot;, &quot;&quot;, &quot;or\nnot\tto&quot;, &quot;&quot;, &quot;be&quot;]</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/( )/</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;&quot;, &quot; &quot;, &quot;To\tbe&quot;, &quot; &quot;, &quot;&quot;, &quot; &quot;, &quot;or\nnot\tto&quot;, &quot; &quot;, &quot;&quot;, &quot; &quot;, &quot;be&quot;, &quot; &quot;, &quot;&quot;, &quot; &quot;]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span> <span class="sr">/\s+/</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;&quot;, &quot;To&quot;, &quot;be&quot;, &quot;or&quot;, &quot;not&quot;, &quot;to&quot;, &quot;be&quot;]</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;To&quot;, &quot;be&quot;, &quot;or&quot;, &quot;not&quot;, &quot;to&quot;, &quot;be&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the ruby docs:</p>

<blockquote><p>If pattern is a single space, str is split on whitespace, with leading whitespace and runs of contiguous whitespace characters ignored.</p></blockquote>


<p>Note that split by regex without groups omits trailing matches. Undocumented?</p>
]]></content>
  </entry>
  
</feed>
