<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Video | SoftOver]]></title>
  <link href="http://unclegene.github.io/blog/categories/video/atom.xml" rel="self"/>
  <link href="http://unclegene.github.io/"/>
  <updated>2013-08-30T10:42:43-07:00</updated>
  <id>http://unclegene.github.io/</id>
  <author>
    <name><![CDATA[Eugene Kalenkovich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Boundaries by Gary Bernhardt]]></title>
    <link href="http://unclegene.github.io/blog/2013/08/12/boundaries-by-gary-bernhardt/"/>
    <updated>2013-08-12T10:50:00-07:00</updated>
    <id>http://unclegene.github.io/blog/2013/08/12/boundaries-by-gary-bernhardt</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/yTkzNHF6rMs "></iframe></div></p>

<p><blockquote><p>Some people test in isolation, mocking everything except the class under test. We&rsquo;ll start with that idea, quickly examine the drawbacks, and ask how we might fix them without losing the benefits. This will send us on a trip through behavior vs. data, mutation vs. immutability, interface vs. data dependencies, how data shape affords parallelism, and what a system optimizing each of these for natural isolation might look like.</p></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delicious Controversy: Docs &amp; Tests by Thomas Meeks]]></title>
    <link href="http://unclegene.github.io/blog/2013/07/01/delicious-controversy-docs-and-tests-by-thomas-meeks/"/>
    <updated>2013-07-01T08:46:00-07:00</updated>
    <id>http://unclegene.github.io/blog/2013/07/01/delicious-controversy-docs-and-tests-by-thomas-meeks</id>
    <content type="html"><![CDATA[<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/9md-GTF_Th8 "></iframe></div></p>

<p><blockquote><p>Self-documenting code is a pipe dream. TDD (or BDD) is not the panacea of testing. In the pursuit of test coverage we&rsquo;ve forgotten what really matters: getting things done. Lets talk about putting documentation and testing into their proper place. Tools that ease maintenance, help other developers join a project, and reduce bugs.<br/>I&rsquo;m going to go over lessons learned in writing, maintaining, and introducing new developers to 20,000 lines of code. Specifically, how we are testing, documenting, and refactoring our code to stay sane, make the team happier, and get more done.</p></blockquote></p>
]]></content>
  </entry>
  
</feed>
